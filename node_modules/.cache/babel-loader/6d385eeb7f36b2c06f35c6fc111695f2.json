{"ast":null,"code":"const LocalStorage = (() => {\n  // check if local storage available\n  let localStor = storageAvailable('localStorage');\n\n  function storageAvailable(type) {\n    var storage;\n\n    try {\n      storage = window[type];\n      var x = '__storage_test__';\n      storage.setItem(x, x);\n      storage.removeItem(x);\n      return true;\n    } catch (e) {\n      return e instanceof DOMException && ( // everything except Firefox\n      e.code === 22 || // Firefox\n      e.code === 1014 || // test name field too, because code might not be present\n      // everything except Firefox\n      e.name === 'QuotaExceededError' || // Firefox\n      e.name === 'NS_ERROR_DOM_QUOTA_REACHED') && // acknowledge QuotaExceededError only if there's something already stored\n      storage && storage.length !== 0;\n    }\n  }\n\n  function copyToLocal(cartList) {\n    console.log('COPYTOLOCAL');\n\n    if (localStor) {\n      localStorage.setItem(\"cart\", JSON.stringify(cartList));\n    }\n  } // returns local storage if available, if not returns empty array\n\n\n  function getLocal() {\n    if (localStor && JSON.parse(localStorage.getItem(\"cart\")) != '') {\n      let local = JSON.parse(localStorage.getItem(\"cart\"));\n      return local;\n    } else {\n      return null;\n    }\n  }\n\n  function resetLocal() {\n    if (localStor) {\n      localStorage.setItem('cart', JSON.stringify([]));\n    }\n  }\n\n  return {\n    copyToLocal,\n    getLocal,\n    resetLocal\n  };\n})();\n\nexport default LocalStorage;","map":{"version":3,"sources":["/home/erik/the_odin_project/shopping/src/components/LocStorage.js"],"names":["LocalStorage","localStor","storageAvailable","type","storage","window","x","setItem","removeItem","e","DOMException","code","name","length","copyToLocal","cartList","console","log","localStorage","JSON","stringify","getLocal","parse","getItem","local","resetLocal"],"mappings":"AAAA,MAAMA,YAAY,GAAG,CAAC,MAAM;AACxB;AAEI,MAAIC,SAAS,GAAGC,gBAAgB,CAAC,cAAD,CAAhC;;AAEA,WAASA,gBAAT,CAA0BC,IAA1B,EAAgC;AAC5B,QAAIC,OAAJ;;AACA,QAAI;AACAA,MAAAA,OAAO,GAAGC,MAAM,CAACF,IAAD,CAAhB;AACA,UAAIG,CAAC,GAAG,kBAAR;AACAF,MAAAA,OAAO,CAACG,OAAR,CAAgBD,CAAhB,EAAmBA,CAAnB;AACAF,MAAAA,OAAO,CAACI,UAAR,CAAmBF,CAAnB;AACA,aAAO,IAAP;AACH,KAND,CAOA,OAAMG,CAAN,EAAS;AACL,aAAOA,CAAC,YAAYC,YAAb,MACH;AACAD,MAAAA,CAAC,CAACE,IAAF,KAAW,EAAX,IACA;AACAF,MAAAA,CAAC,CAACE,IAAF,KAAW,IAFX,IAGA;AACA;AACAF,MAAAA,CAAC,CAACG,IAAF,KAAW,oBALX,IAMA;AACAH,MAAAA,CAAC,CAACG,IAAF,KAAW,4BATR,KAUH;AACCR,MAAAA,OAAO,IAAIA,OAAO,CAACS,MAAR,KAAmB,CAXnC;AAYH;AACJ;;AAED,WAASC,WAAT,CAAqBC,QAArB,EAA8B;AAC1BC,IAAAA,OAAO,CAACC,GAAR,CAAY,aAAZ;;AACA,QAAIhB,SAAJ,EAAe;AACXiB,MAAAA,YAAY,CAACX,OAAb,CAAqB,MAArB,EAA6BY,IAAI,CAACC,SAAL,CAAeL,QAAf,CAA7B;AACH;AACJ,GAnCmB,CAqCpB;;;AACA,WAASM,QAAT,GAAmB;AACf,QAAIpB,SAAS,IAAIkB,IAAI,CAACG,KAAL,CAAWJ,YAAY,CAACK,OAAb,CAAqB,MAArB,CAAX,KAA4C,EAA7D,EAAiE;AAC7D,UAAIC,KAAK,GAAGL,IAAI,CAACG,KAAL,CAAWJ,YAAY,CAACK,OAAb,CAAqB,MAArB,CAAX,CAAZ;AACA,aAAOC,KAAP;AAEH,KAJD,MAKK;AACD,aAAO,IAAP;AACH;AACJ;;AAED,WAASC,UAAT,GAAsB;AAClB,QAAIxB,SAAJ,EAAe;AACXiB,MAAAA,YAAY,CAACX,OAAb,CAAqB,MAArB,EAA6BY,IAAI,CAACC,SAAL,CAAe,EAAf,CAA7B;AACH;AACJ;;AAED,SAAO;AACHN,IAAAA,WADG;AAEHO,IAAAA,QAFG;AAGHI,IAAAA;AAHG,GAAP;AAMH,CA7DgB,GAArB;;AA+DI,eAAezB,YAAf","sourcesContent":["const LocalStorage = (() => {\n    // check if local storage available\n    \n        let localStor = storageAvailable('localStorage');\n    \n        function storageAvailable(type) {\n            var storage;\n            try {\n                storage = window[type];\n                var x = '__storage_test__';\n                storage.setItem(x, x);\n                storage.removeItem(x);\n                return true;\n            }\n            catch(e) {\n                return e instanceof DOMException && (\n                    // everything except Firefox\n                    e.code === 22 ||\n                    // Firefox\n                    e.code === 1014 ||\n                    // test name field too, because code might not be present\n                    // everything except Firefox\n                    e.name === 'QuotaExceededError' ||\n                    // Firefox\n                    e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\n                    // acknowledge QuotaExceededError only if there's something already stored\n                    (storage && storage.length !== 0);\n            }\n        }\n    \n        function copyToLocal(cartList){\n            console.log('COPYTOLOCAL');\n            if (localStor) {\n                localStorage.setItem(\"cart\", JSON.stringify(cartList));\n            }\n        }\n    \n        // returns local storage if available, if not returns empty array\n        function getLocal(){\n            if (localStor && JSON.parse(localStorage.getItem(\"cart\")) != '') {\n                let local = JSON.parse(localStorage.getItem(\"cart\"));\n                return local; \n    \n            }\n            else {\n                return null;\n            }\n        }\n    \n        function resetLocal() {\n            if (localStor) {\n                localStorage.setItem('cart', JSON.stringify([]));\n            }\n        }\n    \n        return {\n            copyToLocal,\n            getLocal,\n            resetLocal\n        }\n    \n    })();\n\n    export default LocalStorage;\n"]},"metadata":{},"sourceType":"module"}